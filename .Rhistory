mathematicaMatr <- zeros(5)
mathematicaMatr[1,] <- c(0.23,0.15,0.12,0.18,0.32)
mathematicaMatr[2,] <- c(0,0.85,0.15,0,0)
mathematicaMatr[3,] <- c(0,0,0.88,0.12,0)
mathematicaMatr[4,] <- c(0,0,0,0.83,0.17)
mathematicaMatr[5,] <- c(0,0,0,0,1)
statesNames <- letters[1:5]
mathematicaMc <- new("markovchain", transitionMatrix = mathematicaMatr,
name = "Mathematica MC", states = statesNames)
m<-mathematicaMc
#afisare matrice de tranzitie
m
windows()
#desenare stare initiala
plot(m,package="diagram")
title(main = "Diagrama starilor")
#calcul iterativ  matrice de tranzitie
iterate.P <- function(x, P, n) {
res <- matrix(NA, n+1, length(x))
res[1,] <- x
for (i in seq_len(n))
res[i+1,] <- x <- x*P
res
}
#numar de controale efectuate
n <-4
#calcul matrice de tranzitie dupa n=4 controale
y1<-iterate.P(c(1,0,0,0,0),m,n)
y1
windows()
matplot(0:n,y1,type="l",lty=1,xlab="Pasi",ylab="y",las=1)
library(markovchain)
require(matlab)
require(stats)
mathematicaMatr <- zeros(5)
mathematicaMatr[1,] <- c(0.23,0.15,0.12,0.18,0.32)
mathematicaMatr[2,] <- c(0,0.85,0.15,0,0)
mathematicaMatr[3,] <- c(0,0,0.88,0.12,0)
mathematicaMatr[4,] <- c(0,0,0,0.83,0.17)
mathematicaMatr[5,] <- c(0,0,0,0,1)
statesNames <- letters[1:5]
mathematicaMc <- new("markovchain", transitionMatrix = mathematicaMatr,
name = "Mathematica MC", states = statesNames)
m<-mathematicaMc
#afisare matrice de tranzitie
m
windows()
#desenare stare initiala
plot(m,package="diagram")
title(main = "Diagrama starilor")
#calcul iterativ  matrice de tranzitie
iterate.P <- function(x, P, n) {
res <- matrix(NA, n+1, length(x))
res[1,] <- x
for (i in seq_len(n))
res[i+1,] <- x <- x*P
res
}
#numar de controale efectuate
n <-4
#calcul matrice de tranzitie dupa n=4 controale
y1<-iterate.P(c(1,0,0,0,0),m,n)
y1
windows()
matplot(0:n,y1,type="l",lty=1,xlab="Pasi",ylab="y",las=1)
title(main="Lant Markov n=4")
source('D:/OneDrive/Facultate/4_2/Ingineria calitatii si fiabilitate/Lab10/Lab10.R')
N <- 4
MAX_SOLUTIONS <- 3
generatedSolutions <- 0
pozitieValida <- function(linie, col, tabla) {
for (i in 1:linie) {
if (tabla[i, col] == 1) {
return(FALSE)
}
}
j <- col - 1
i <- linie - 1
while ((i >= 1) && (j >= 1)) {
if (tabla[i, j] == 1) {
return(FALSE)
}
j <- j - 1
i <- i - 1
}
j <- col + 1
i <- linie - 1
while ((i >= 1) && (j <= N)) {
if (tabla[i, j] == 1) {
return(FALSE)
}
j <- j + 1
i <- i - 1
}
return(TRUE)
}
printSOlution <- function(tabla) {
for(i in 1:N){
for(j in 1:N){
cat(tabla[i,j])
}
writeLines("")
}
writeLines("")
}
queens <- function(linie, tabla) {
if (linie > N) {
printSOlution(tabla)
assign("generatedSolutions", generatedSolutions + 1, envir = .GlobalEnv)
return()
}
for (col in 1:N) {
if (pozitieValida(linie, col, tabla)) {
tabla[linie,col] <- 1
queens(linie + 1, tabla)
tabla[linie,col] <- 0
if (generatedSolutions == MAX_SOLUTIONS) {
return()
}
}
}
}
queens(1, matrix(0L, nrow = N, ncol = N))
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
Rcpp::sourceCpp('src/rcpp_n_regine.cpp')
Rcpp::sourceCpp('src/rcpp_n_regine.cpp')
Rcpp::sourceCpp('src/rcpp_n_regine.cpp')
Rcpp::sourceCpp('src/rcpp_n_regine.cpp')
Rcpp::sourceCpp('src/rcpp_n_regine.cpp')
Rcpp::sourceCpp('src/rcpp_n_regine.cpp')
Rcpp::sourceCpp('src/rcpp_n_regine.cpp')
Rcpp::sourceCpp('src/rcpp_n_regine.cpp')
Rcpp::sourceCpp('src/rcpp_n_regine.cpp')
Rcpp::sourceCpp('src/rcpp_n_regine.cpp')
N <- 6
MAX_SOLUTIONS <- 3
generatedSolutions <- 0
pozitieValida <- function(linie, col, tabla) {
for (i in 1:linie) {
if (tabla[i, col] == 1) {
return(FALSE)
}
}
j <- col - 1
i <- linie - 1
while ((i >= 1) && (j >= 1)) {
if (tabla[i, j] == 1) {
return(FALSE)
}
j <- j - 1
i <- i - 1
}
j <- col + 1
i <- linie - 1
while ((i >= 1) && (j <= N)) {
if (tabla[i, j] == 1) {
return(FALSE)
}
j <- j + 1
i <- i - 1
}
return(TRUE)
}
printSOlution <- function(tabla) {
for(i in 1:N){
for(j in 1:N){
cat(tabla[i,j])
}
writeLines("")
}
writeLines("")
}
queens <- function(linie, tabla) {
if (linie > N) {
printSOlution(tabla)
assign("generatedSolutions", generatedSolutions + 1, envir = .GlobalEnv)
return()
}
for (col in 1:N) {
if (pozitieValida(linie, col, tabla)) {
tabla[linie,col] <- 1
queens(linie + 1, tabla)
tabla[linie,col] <- 0
if (generatedSolutions == MAX_SOLUTIONS) {
return()
}
}
}
}
queens(1, matrix(0L, nrow = N, ncol = N))
N <- 4
MAX_SOLUTIONS <- 3
generatedSolutions <- 0
pozitieValida <- function(linie, col, tabla) {
for (i in 1:linie) {
if (tabla[i, col] == 1) {
return(FALSE)
}
}
j <- col - 1
i <- linie - 1
while ((i >= 1) && (j >= 1)) {
if (tabla[i, j] == 1) {
return(FALSE)
}
j <- j - 1
i <- i - 1
}
j <- col + 1
i <- linie - 1
while ((i >= 1) && (j <= N)) {
if (tabla[i, j] == 1) {
return(FALSE)
}
j <- j + 1
i <- i - 1
}
return(TRUE)
}
printSOlution <- function(tabla) {
for(i in 1:N){
for(j in 1:N){
cat(tabla[i,j])
}
writeLines("")
}
writeLines("")
}
queens <- function(linie, tabla) {
if (linie > N) {
printSOlution(tabla)
assign("generatedSolutions", generatedSolutions + 1, envir = .GlobalEnv)
return()
}
for (col in 1:N) {
if (pozitieValida(linie, col, tabla)) {
tabla[linie,col] <- 1
queens(linie + 1, tabla)
tabla[linie,col] <- 0
if (generatedSolutions == MAX_SOLUTIONS) {
return()
}
}
}
}
queens(1, matrix(0L, nrow = N, ncol = N))
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
N <- 4
MAX_SOLUTIONS <- 3
generatedSolutions <- 0
pozitieValida <- function(linie, col, tabla) {
for (i in 1:linie) {
if (tabla[i, col] == 1) {
return(FALSE)
}
}
j <- col - 1
i <- linie - 1
while ((i >= 1) && (j >= 1)) {
if (tabla[i, j] == 1) {
return(FALSE)
}
j <- j - 1
i <- i - 1
}
j <- col + 1
i <- linie - 1
while ((i >= 1) && (j <= N)) {
if (tabla[i, j] == 1) {
return(FALSE)
}
j <- j + 1
i <- i - 1
}
return(TRUE)
}
printSOlution <- function(tabla) {
for(i in 1:N){
for(j in 1:N){
cat(tabla[i,j])
}
writeLines("")
}
writeLines("")
}
queens <- function(linie, tabla) {
if (linie == N+1) {
printSOlution(tabla)
assign("generatedSolutions", generatedSolutions + 1, envir = .GlobalEnv)
return()
}
for (col in 1:N) {
if (pozitieValida(linie, col, tabla)) {
tabla[linie,col] <- 1
queens(linie + 1, tabla)
tabla[linie,col] <- 0
if (generatedSolutions == MAX_SOLUTIONS) {
return()
}
}
}
}
queens(1, matrix(0L, nrow = N, ncol = N))
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
writeLines()
writeLines("")
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
source('D:/Desktop/N regine/Nqueens.R')
N <- 4
Nr_Max_Solutii <- 3
solutiiGenerate <- 0
pozitieValida <- function(linie, col, tabla) {
for (i in 1:linie) {
if (tabla[i, col] == 1) {
return(FALSE)
}
}
j <- col - 1
i <- linie - 1
while ((i >= 1) && (j >= 1)) {
if (tabla[i, j] == 1) {
return(FALSE)
}
j <- j - 1
i <- i - 1
}
j <- col + 1
i <- linie - 1
while ((i >= 1) && (j <= N)) {
if (tabla[i, j] == 1) {
return(FALSE)
}
j <- j + 1
i <- i - 1
}
return(TRUE)
}
printSOlution <- function(tabla) {
for(i in 1:N){
for(j in 1:N){
cat(tabla[i,j])
}
writeLines("")
}
writeLines("")
}
queens <- function(linie, tabla) {
if (linie == N+1) {
printSOlution(tabla)
assign("solutiiGenerate", solutiiGenerate + 1, envir = .GlobalEnv)
return()
}
for (col in 1:N) {
if (pozitieValida(linie, col, tabla)) {
tabla[linie,col] <- 1
queens(linie + 1, tabla)
tabla[linie,col] <- 0
if (solutiiGenerate == Nr_Max_Solutii) {
return()
}
}
}
}
queens(1, matrix(0L, nrow = N, ncol = N))
Rcpp::sourceCpp('src/rcpp_n_regine.cpp')
N <- 4
Nr_Max_Solutii <- 3
solutiiGenerate <- 0
pozitieValida <- function(linie, col, tabla) {
for (i in 1:linie) {
if (tabla[i, col] == 1) {
return(FALSE)
}
}
j <- col - 1
i <- linie - 1
while ((i >= 1) && (j >= 1)) {
if (tabla[i, j] == 1) {
return(FALSE)
}
j <- j - 1
i <- i - 1
}
j <- col + 1
i <- linie - 1
while ((i >= 1) && (j <= N)) {
if (tabla[i, j] == 1) {
return(FALSE)
}
j <- j + 1
i <- i - 1
}
return(TRUE)
}
printSOlution <- function(tabla) {
for(i in 1:N){
for(j in 1:N){
cat(tabla[i,j])
}
writeLines("")
}
writeLines("")
}
queens <- function(linie, tabla) {
if (linie == N+1) {
printSOlution(tabla)
assign("solutiiGenerate", solutiiGenerate + 1, envir = .GlobalEnv)
return()
}
for (col in 1:N) {
if (pozitieValida(linie, col, tabla)) {
tabla[linie,col] <- 1
queens(linie + 1, tabla)
tabla[linie,col] <- 0
if (solutiiGenerate == Nr_Max_Solutii) {
return()
}
}
}
}
queens(1, matrix(0L, nrow = N, ncol = N))
N <- 8
Nr_Max_Solutii <- 3
solutiiGenerate <- 0
pozitieValida <- function(linie, col, tabla) {
for (i in 1:linie) {
if (tabla[i, col] == 1) {
return(FALSE)
}
}
j <- col - 1
i <- linie - 1
while ((i >= 1) && (j >= 1)) {
if (tabla[i, j] == 1) {
return(FALSE)
}
j <- j - 1
i <- i - 1
}
j <- col + 1
i <- linie - 1
while ((i >= 1) && (j <= N)) {
if (tabla[i, j] == 1) {
return(FALSE)
}
j <- j + 1
i <- i - 1
}
return(TRUE)
}
printSOlution <- function(tabla) {
for(i in 1:N){
for(j in 1:N){
cat(tabla[i,j])
}
writeLines("")
}
writeLines("")
}
queens <- function(linie, tabla) {
if (linie == N+1) {
printSOlution(tabla)
assign("solutiiGenerate", solutiiGenerate + 1, envir = .GlobalEnv)
return()
}
for (col in 1:N) {
if (pozitieValida(linie, col, tabla)) {
tabla[linie,col] <- 1
queens(linie + 1, tabla)
tabla[linie,col] <- 0
if (solutiiGenerate == Nr_Max_Solutii) {
return()
}
}
}
}
queens(1, matrix(0L, nrow = N, ncol = N))
